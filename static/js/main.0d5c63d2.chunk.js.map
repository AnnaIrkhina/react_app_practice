{"version":3,"sources":["logo.svg","Header/TopMenuItem.js","Header/Header.js","Footer/FooterMenuItem.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TopMenuItem","props","item","href","onClick","e","handleTopMenu","preventDefault","Header","topMenu","map","el","index","key","FooterMenuItem","footerMenuItem","title","items","Footer","footerMenu","App","useState","setTitle","className","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sLAAAA,EAAOC,QAAU,IAA0B,kC,kGCiB5BC,MAbf,SAAqBC,GACjB,IAIIC,EAAOD,EAAMC,KACnB,OACC,4BACI,uBAAGC,KAAO,IAAIC,QAPD,SAACC,GACbJ,EAAMK,cAAcJ,GACpBG,EAAEE,mBAK8BL,KCOzBM,MAdf,SAAgBP,GACd,IAAMQ,EAAUR,EAAMQ,QAChBH,EAAgBL,EAAMK,cAC5B,OACE,6BACE,4BAEKG,EAAQC,KAAI,SAACC,EAAIC,GAAL,OAAe,kBAAC,EAAD,CAAaN,cAAeA,EAAeO,IAAKD,EAAOV,KAAMS,UCQpFG,MAhBf,SAAwBb,GACpB,IAIIC,EAAOD,EAAMC,KACnB,OACC,4BACI,uBAAGC,KAAO,IAAIC,QAPD,SAACC,GACbJ,EAAMc,eAAeb,EAAKc,OAC1BX,EAAEE,mBAK8BL,EAAKc,OACtC,4BACKd,EAAKe,MAAMP,KAAI,SAAAC,GAAE,OAAI,wBAAIE,IAAKF,GAAKA,SCKhCO,MAdf,SAAgBjB,GAEZ,IAAMkB,EAAalB,EAAMkB,WACnBJ,EAAiB,SAACb,GAAQD,EAAMc,eAAeb,IACrD,OACI,6BACI,4BAEKiB,EAAWT,KAAI,SAACC,GAAD,OAAQ,kBAAC,EAAD,CAAgBT,KAAMS,EAAIQ,WAAYA,EAAYJ,eAAgBA,UC0B3FK,MAjCf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJL,EADI,KACGM,EADH,KAuBX,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,CAAQd,QAtBA,CAAC,QACb,UACA,OACA,WAmB8BH,cAlBZ,SAACK,GACnBW,EAASX,MAkBL,6BAAK,4BAAKK,IACV,kBAAC,EAAD,CAAQG,WAXC,CACb,CAACH,MAAO,UAAWC,MAAM,CAAC,UAAU,YAAY,cAChD,CAACD,MAAO,UAAWC,MAAM,CAAC,YAAY,UAAU,YAAY,YAAY,KACxE,CAACD,MAAO,OAAQC,MAAM,CAAC,YAAY,UAAU,YAAY,YAAY,MAQ/BF,eAhBnB,SAACJ,GACpBa,QAAQC,IAAI,QAAQd,GACpBW,EAASX,QCPGe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.0d5c63d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nimport './../App.css';\n\nfunction TopMenuItem(props) {\n    const clicked = (e)=>{\n        props.handleTopMenu(item);\n        e.preventDefault();\n    }\n  const item = props.item;\n  return (\n   <li>\n       <a href = \"#\" onClick={clicked}>{item}</a>\n   </li>\n  );\n}\n\nexport default TopMenuItem;\n","import React from 'react';\n\nimport './../App.css';\nimport './TopMenuItem';\nimport TopMenuItem from \"./TopMenuItem\";\nfunction Header(props) {\n  const topMenu = props.topMenu;\n  const handleTopMenu = props.handleTopMenu;\n  return (\n    <div>\n      <ul>\n          {/* eslint-disable-next-line react/jsx-no-undef */}\n          {topMenu.map((el, index) => <TopMenuItem handleTopMenu={handleTopMenu} key={index} item={el}/>)}\n\n      </ul>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nimport './../App.css';\n\nfunction FooterMenuItem(props) {\n    const clicked = (e)=>{\n        props.footerMenuItem(item.title);\n        e.preventDefault();\n    }\n  const item = props.item;\n  return (\n   <li>\n       <a href = \"#\" onClick={clicked}>{item.title}</a>\n       <ul>\n           {item.items.map(el => <li key={el}>{el}</li>)}\n       </ul>\n   </li>\n  );\n}\n\nexport default FooterMenuItem;\n","import React from 'react';\n\nimport './../App.css';\nimport FooterMenuItem from \"./FooterMenuItem\";\n\nfunction Footer(props) {\n    //const topMenu = props.topMenu;\n    const footerMenu = props.footerMenu;\n    const footerMenuItem = (item)=>{props.footerMenuItem(item);}\n    return (\n        <div>\n            <ul>\n                {/* eslint-disable-next-line react/jsx-no-undef */}\n                {footerMenu.map((el) => <FooterMenuItem item={el} footerMenu={footerMenu} footerMenuItem={footerMenuItem}/>)}\n            </ul>\n        </div>\n    );\n}\n\nexport default Footer;\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from \"./Header/Header\";\nimport Footer from \"./Footer/Footer\"\n\nfunction App() {\n    const [title, setTitle] = useState('');\n\n    const topMenu = ['About',\n        'Service',\n        'Help',\n        'Selling']\n    const handleTopMenu = (el) => {\n        setTitle(el);\n        //alert(el + ' Clicked ' + count + ' times');\n    }\n    const footerMenuItem = (el)=>{\n        console.log('el = '+el);\n        setTitle(el);\n    }\n\n    let footerMenu = [\n        {title: 'ON SHOP', items:['sopping','ertertert','ertertert']},\n        {title: 'SERVICE', items:['sdfsdfsdf','sopping','ertertert','ertertert','']},\n        {title: 'HELP', items:['sdfsdfsdf','sopping','ertertert','ertertert','']}\n    ]\n\n\n    return (\n        <div className=\"App\">\n            <Header topMenu={topMenu} handleTopMenu={handleTopMenu}/>\n            <div><h1>{title}</h1></div>\n            <Footer footerMenu = {footerMenu} footerMenuItem={footerMenuItem}/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}